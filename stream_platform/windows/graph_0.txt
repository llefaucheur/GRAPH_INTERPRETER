;----------------------------------------------------------------------------------------
;   Stream-based processing using a graph interpreter (LOW-END) :                                   
;   
;   The main script receives a code for the implementation of a use-case :
;       - The adpcm decoder is pre-configured in the graph (presets)
;       - adpcm content can result in mono/stereo resulting in a need for stream conversion
;       - The modulator is activated after a delay of one second
;       - The ADC detection flag is used by a second script to toggle a GPIO
;       - The tone modulator is stopped at T0+2seconds
;
;   data_in_0
;   +----------+     +---------+    +----------+
;   | APP      +----->ADPCM dec+---->converter +
;   +----------+     +---------+    +----------+
;                                        |
;                                        |1
;   +----------+     +---------+     +---v-----+   +--------+   +---------+
;   | CmdScript+.....>Tone Modu+----->Mixer    +---> filter0+---> line-out| line_out_0
;   +----------+     +---------+    0+---------+2  +--------+   +---------+   
;
;   analog_sensor_0                                        
;   +----------+     +--------+    0+--------+1    +--------+     +--------+
;   | ADC      +-----> filter1+----->split   +----->detect  +-----> GPIO   | gpio_out_0 
;   +----------+     +--------+     +----+---+     +--------+     +--------+
;                                        |2
;                                        +--------------------------------> data_out_0
;
;----------------------------------------------------------------------------------------


graph

top_header

    ; - packed format of the final binary graph file (COPY_CONF_GRAPH0_COPY_ALL_IN_RAM=0, COPY_CONF_GRAPH0_FROM_STREAM_INST=2) 
    ; - script control option in the scheduler (S->scheduler_control[SCRIPT_SCTRL])
    ; - bit-field of allowed processors (procid_allowed GR[4])

    0 0 1 

;----------------------------------------------------------------------------------------
;   file paths for sub graphs and scripts

paths
    ./              path index 0 is local
    ../stream_graph path index 1
    ../stream_test  path index 2
_end_

; --------------------------------------------------
;   the data stream format used in the graph are grouped here :
;   ID; FrameSize(22b); Raw; Nchan; FS(float); Timestp; Interleaving; specific(Word2)

format
;   I F   R N    FS T I S
    0 8  17 1 16000 0 0 3    
    1 12 17 1 16000 0 0 4    formatID1; frameSize; raw; nchan; FS(float); timestp; intlv; specific tuning;
_end_

;----------------------------------------------------------------------------------------
; list of HW IOs from "stream_tools_files_manifests_PLATFORMNAME.txt" + IO arc patched with this IO.
;   nb HW IO interfaces
;   - index used during the declarion of IO-arcs, allows easy redirection to other IOs 
;   - stream format (Index of the above table)
;   - ID of the interface given in "files_manifests_computer"
;   - with (X) :
;     setting index (8bits intlv/nchan/frame/FS = ARC0 producer format + mixed-signal settings 24bits)
;     VID of buffer : memory bank index from platform_manifest_computer.txt (special DMA, speed)
;
;   in comments : the incremented index of the interface used when building the graph (arc section below)
    
top_graph_interface
; F  Idx F  HWID  
  S  0   0  0    format 0 FWIDX=0 io_platform_data_in_0.txt       
  S  1   0  9    format 0 FWIDX=1 io_platform_data_out_0.txt       
  S  2   0  1    format 0 FWIDX=2 io_platform_analog_sensor_0.txt 
  S  3   0  5    format 0 FWIDX=6 io_platform_line_out_0.txt      
  S  4   0  6    format 0 FWIDX=7 io_platform_gpio_out_0.txt      

    _end_

;
;----------------------------------------------------------------------------------------
; Split the memory mapping of the platform manifest to ease memory overlays per memory blocks
;   format : original platform_VID , new name ,  start within VID , length
;   
;top_memory_mapping
;  HWVID NEW    START   LENGTH
;   2    200    1024    32700
;    _end_
;
;----------------------------------------------------------------------------------------
; SWC TRACE 
;   
;top_trace_node
;   ./subgraph_name/node_name #instanceID 
;    _end_
;
;----------------------------------------------------------------------------------------
; ARC DEBUG registers
;   
; seperate the memory "bank"  of debug data (DBGB0_LW1)
;top_arc_debug_offset
;   ./subgraph_name #arc_offset_of_debug_registers 
;    _end_
;----------------------------------------------------------------------------------------
;


node
    arm_stream_script 1     1 = index of the first script in the SCRIPT_LW0 table
    S 2 2                   number of registers, stack depth, 

    2 h16; 2002 0001        loadk int16 r0 r2 1
    1 h16; 10E0             copy s0<-r0
    1 h16; e810             equ r1,r0
    1 h16; 0381             ccallsys 1
    1 h16; C000             ret
    _end_                   end of byte codes

_end_



;----------------------------------------------------------------------------------------
; arm_stream_filter
;----------------------------------------------------------------------------------------
;   Operation : receives one multichannel stream and produces one filtered multichannel stream. 
;   Filtering is identical on each channel. GUI parameters are given in float, implementation 
;   is CMSIS-DSP through Stream services
;   Parameters : biquad filters coefficients used in cascade. Implementation is 2 Biquads max.
;   (see www.w3.org/TR/audio-eq-cookbook)
;
;   presets:
;   #0 : bypass
;   #1 : LPF fc=fs/4
;   #11..42: delay-line of 1..32 samples
;
;   parameter of filter : 
;   - number of biquads in cascade (1 or 2)
;   - coefficients in Q15
;
node
    arm_stream_filter 0         
;
    S 0     preset
    parameters
        1  u8;  0                          TAG = "all parameters"
        1  u8;  2                           Two biquads
        1  u8;  0                           postShift
        5 h16; 1231 1D28 1231 63E8 D475     b0/b1/b2/-a1/-a2  ellip(4, 1, 40, 3600/8000, 'low') 
        5 h16; 1231 0B34 1231 2470 9821     second biquad
        ;  _include    1   arm_stream_filter_parameters_x.txt      
    _end_
_end_

;-----------------------------------------
; second instance 
node
    arm_stream_filter 1         
;
    S 0     preset
    parameters
        1  u8;  0                          TAG = "all parameters"
        1  u8;  1                           one biquad
        1  u8;  0                           postShift
        5 h16; 0102 0203 0405 7FFE A55A     b0/b1/b2/-a1/-a2 
        ;  _include    1   arm_stream_filter_parameters_x.txt      
        _end_
    _end_
_end_

;----------------------------------------------------------------------------------------
;    arm_stream_detector
;----------------------------------------------------------------------------------------
node 
    arm_stream_detector 0    
    S 1                         preset 
_end_

;----------------------------------------------------------------------------------------
;    arm_stream_decompressor
;----------------------------------------------------------------------------------------
node 
    arm_stream_decompressor 1
    S 1                         IADPCM 
_end_

;----------------------------------------------------------------------------------------
;    arm_stream_converter
;----------------------------------------------------------------------------------------
node 
    arm_stream_converter 2
    S 0                        
_end_

;----------------------------------------------------------------------------------------
;    arm_stream_modulator
;----------------------------------------------------------------------------------------
node 
    arm_stream_modulator 3
    S 0                     simple format
_end_

;----------------------------------------------------------------------------------------
;    arm_stream_mixer
;----------------------------------------------------------------------------------------
node 
    arm_stream_mixer 4
    S 0                     simple format
_end_

;----------------------------------------------------------------------------------------
;    arm_stream_split
;----------------------------------------------------------------------------------------
node 
    arm_stream_split 5
    S 0                     simple format
_end_


;--------------- LAST SECTION OF THE GRAPH-------------------------------------
;
;  debug registers have 64bits and are stored in the first arc descriptors, the first arc index is >0 (<2K)
;   there are 16 debug registers max (including for subgraphs)
;  To manage subgraph arc debug without changing the rdebug register index, there is a "bank" (DBGB0_LW1) 
;   associated to arcs when the SWC is launched set at the top of the main graph (top_arc_debug_offset)
;
;       Memory bank virtual index(0 or speed control); buffer size scaling 
;       factor (float) to apply to the minimum possible size between the producer and the consumer
;
;           1      2        3   4    5     6      7     8    9    10    
;       ProdFMT ConsFMT    OVF UND DBGCMD REG    FLUSH EXTD VID IoFrameSizeMulfac
;
;       Node/Stream name, instance source and its output port ID
;       Node/destination, its instance and input port ID       
;
;       Extended format = 
;         X 0 0  0 0 0 0   0 0 0 1.0  Xtended ProdFMT ConsFMT   OVF UND DBGCMD REG   FLUSH EXTD VID IOSizeMulfac (xFrame) 
;
;       Simple format = 
;         S 0 0                       Simple  ProdFMT ConsFMT 
;       Arc data in Flash : 
;          parameters
;            arm_stream_script_data  #script_index     ; no byte code, just raw data.
;          parameter_end  
;
arc
;----INPUTS

    S 0 0                           Simple ProductionFormat ConsumptionFormat 
    _graph_interface        0  1    0 = data_in_0, second parameter=set0_copy1
    arm_stream_decompressor 0  0    [0]:decompressor instance [0]:RX arc of the node

    S 0 0                           Simple ProductionFormat ConsumptionFormat 
    _graph_interface        2  1    2 = analog_sensor_0, second parameter=set0_copy1
    arm_stream_filter       1  0    [1]:instance of the node, [0]:index of the arc (RX)

;----GRAPH

    S 0 0                           Simple ProductionFormat ConsumptionFormat 
    arm_stream_decompressor 0  1    [0]:instance of the node, [1]:index of the arc (TX)
    arm_stream_converter    0  0    [0]:instance of the node, [0]:index of the arc (RX)

    S 0 0                           Simple ProductionFormat ConsumptionFormat 
    arm_stream_converter    0  1    [0]:instance of the node, [1]:index of the arc (TX)
    arm_stream_mixer        0  1    [0]:instance of the node, [0]:index of the arc (RX)

    S 0 0                           Simple ProductionFormat ConsumptionFormat 
    arm_stream_modulator    0  1    tone generator
    arm_stream_mixer        0  0    [0]:instance of the node, [1]:index of the arc (RX)

    S 0 0                           Simple ProductionFormat ConsumptionFormat 
    arm_stream_mixer        0  2    [0]:instance of the node, [2]:index of the arc (TX)    
    arm_stream_filter       0  0    [0]:instance of the node, [0]:index of the arc (RX)


    S 0 0                           Simple ProductionFormat ConsumptionFormat 
    arm_stream_filter       1  1    [1]:instance of the node, [1]:index of the arc (TX)    
    arm_stream_split        0  0    [0]:instance of the node, [0]:index of the arc (RX)

    S 0 0                           Simple ProductionFormat ConsumptionFormat 
    arm_stream_split        0  1    [0]:instance of the node, [2]:index of the arc (TX)    
    arm_stream_detector     0  0    [0]:instance of the node, [0]:index of the arc (RX)

;----OUTPUTS

    S 0 0                           Simple ProductionFormat ConsumptionFormat 
    arm_stream_filter       0  1    [0]:instance of the node, [1]:index of the arc (TX)
    _graph_interface        3  0    3 = line_out_0 ,  set buffer

    S 0 0                           Simple ProductionFormat ConsumptionFormat 
    arm_stream_detector     0  1    [0]:instance of the node, [1]:index of the arc (TX)
    _graph_interface        4  0    4 = gpio_out_0, second parameter=set0_copy1

    S 0 0                           Simple ProductionFormat ConsumptionFormat 
    arm_stream_split        0  2    [0]:instance of the node, [1]:index of the arc (TX)
    _graph_interface        1  0    1 = data_out_0, second parameter=set0_copy1
_end_
