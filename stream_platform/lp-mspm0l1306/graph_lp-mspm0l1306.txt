;--------------------------------------------------------------------------
;   Stream-based processing using a graph interpreter :                    
;   
;   The main script receives a code for the implementation of a use-case :
;       - The ADC detection is used to toggle a GPIO
; 
;   +----------+     +--------+      +--------+     +--------+
;   | ADC      +-----> filter +------> detect +-----> GPIO   | 
;   +----------+     +--------+      +--------+     +--------+
;                
;----------------------------------------------------------------------
graph_location          1           ; script and linked-list stays in flash 
;----------------------------------------------------------------------
format_index            0
format_frame_length     2           ; minimum = frame of one int16
format_index            1
format_frame_length     64         ; "ADC_SAMPLE_SIZE" 32 samples = 64 Bytes
;----------------------------------------------------------------------
stream_io               0           ;
stream_io_hwid          2           ; io_platform_analog_sensor_0 (DMA interface)
stream_io               1           ;
stream_io_hwid          8           ; gpio_out_1
;----------------------------------------------------------------------
node arm_stream_filter  0 
    node_preset         1                       ; Q15 filter
    node_parameters     0                       ; TAG = "all parameters"
        1  u8;  2                               ; Two biquads
        1  u8;  1                               ; postShift
        5 s16;  13519 -27019 13519 23358 -8819  ;  elliptic high-pass 600Hz/16kHz
        5 s16;  13519 -26929 13519 29806 -14580
    end
;----------------------------------------------------------------------
node sigp_stream_detector 0     
    node_preset         3           ;    detector preset 
;----------------------------------------------------------------------
; arc_input   { io / set0copy1 / fmtProd } + { node / inst / arc / fmtCons }
; arc_output  { io / set0copy1 / fmtCons } + { node / inst / arc / fmtProd }
; arc      { node / inst / arc / fmtProd } + { node / inst / arc / fmtCons }
;
arc_input   0 0 1 arm_stream_filter     0 0 1  ; io0 set0copy1 fmt1     ; INPUT => IIR, format 1 (array of samples)
arc_output  1 0 0 sigp_stream_detector  0 1 0  ; io1 set0copy1 fmt0     ; DETECT => OUTPUT (one int16 for the detector output)

arc arm_stream_filter 0 1 1 sigp_stream_detector 0 0 1                  ; IIR => DETECT  fmtProd = fmtCons = 64Bytes

end