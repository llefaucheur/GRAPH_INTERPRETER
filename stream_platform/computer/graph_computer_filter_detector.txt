;--------------------------------------------------------------------------
;   Stream-based processing using a graph interpreter :                    
;   
;   The main script receives a code for the implementation of a use-case :
;       - The ADC detection is used to toggle a GPIO
; 
;   +----------+     +--------+      +--------+     +--------+
;   | ADC      +-----> filter +------> detect +-----> GPIO   | 
;   +----------+     +--------+      +--------+     +--------+
;                
;----------------------------------------------------------------------
graph_locations -1 -1 -1 -1 0 0 0   ; script and linked-list stays in flash 
;----------------------------------------------------------------------
format_index            0
format_frame_length     2           ; size_data_in_1 (one s16 at a time )
format_index            1
format_frame_length     96          ; size_gpio_out_0 96
;----------------------------------------------------------------------
stream_io_graph         0   1       ; Platform index 1 = io_platform_data_in_1.txt 
stream_io_graph         1   9       ; Platform index 9 = io_platform_data_out_0.txt
;----------------------------------------------------------------------
node arm_stream_filter  0 
    node_preset         1                       ; Q15 filter
    node_parameters     0                       ; TAG = "all parameters"

        1  u8;  0                               ; CMSIS format
        1  u8;  1                               ; q15 format
        1  u8;  2                               ; Two biquads
        1  s8;  1                               ; postShift
        5 s16; 681   422   681 23853 -15161     ; INT16 elliptic band-pass 1450..1900/16kHz
        5 s16; 681 -1342   681 26261 -15331     ; 

    end
;----------------------------------------------------------------------
node sigp_stream_detector 0     
    node_preset           3                 ; detector preset 
;----------------------------------------------------------------------
; arc_input   { io / set0copy1 / fmtProd } + { node / inst / arc / fmtCons }
; arc_output  { io / set0copy1 / fmtCons } + { node / inst / arc / fmtProd }
; arc_nodes   { inst / arc / fmtProd }     + { inst / arc / fmtCons }
;
arc_input   0 1 0 arm_stream_filter  0 0 0  ; io0 set0copy1 fmt1     ; INPUT => IIR, format 1 (array of samples)
arc_jitter_ctrl  3.0                                                 ;  increase the size of the input buffer 

arc_nodes  arm_stream_filter 0 0 0   sigp_stream_detector 0 1 1

arc_output  1 1 1 sigp_stream_detector  0 1 0  ; io1 set0copy1 fmt0  ; DETECT => OUTPUT (one int16 for the detector output)

end