;--------------------------------------------------------------------------
;   Stream-based processing using a graph interpreter :                    
;   
;   The main script receives a code for the implementation of a use-case :
;       - The ADC detection is used to toggle a GPIO
; 
;   +----------+     +--------+      +--------+     +--------+
;   | ADC      +-----> filter +------> detect +-----> GPIO   | 
;   +----------+     +--------+      +--------+     +--------+
;                
;----------------------------------------------------------------------
graph_locations -1 -1 -1 -1 0 0 0   ; script and linked-list stays in flash 
;----------------------------------------------------------------------
format_index            0
format_frame_length     32          ; 
format_index            1
format_frame_length     32          ; size_data_in_1
;----------------------------------------------------------------------
stream_io_graph         0   1       ; graph ID 1=HW ID io_platform_data_in_1.txt
stream_io_graph         1   9       ; graph ID 9=HW ID io_platform_data_out_0.txt
;----------------------------------------------------------------------
node arm_stream_filter  0 
    node_preset         1                       ; Q15 filter
    node_parameters     0                       ; TAG = "all parameters"

        ; BYPASS INT16 ---------------------------------
        ; 1  u8;  0                               ; CMSIS format
        ; 1  u8;  1                               ; q15 format
        ; 1  u8;  2                               ; Two biquads
        ; 1  s8;  1                               ; postShift
        ; 5 s16; 0 16383 0 0 0      
        ; 5 s16; 0 16383 0 0 0      


        ; HIGHPASS INT16 -------------------------------
        ; Fs = 16000;
        ; [b_1,a_1] =  ellip(4, 0.1, 40, 150/(16000/2), 'high'); 
        ; 1  u8;  0                               ; CMSIS format
        ; 1  u8;  1                               ; q15 format
        ; 1  u8;  2                               ; Two biquads
        ; 1  s8;  1                               ; postShift
        ; 5 s16; 16019, -16019,     0, 15455,     0, 
        ; 5 s16; 16019, -32034, 16019, 32219, -15869 
        ; HIGHPASS FLOAT32 -------------------------------
        ; Fs = 16000;
        ; [b_1,a_1] =  ellip(4, 0.1, 40, 150/(16000/2), 'high'); 
        ; 1  u8;  0                               ; CMSIS format
        ; 1  u8;  0                               ; fp32 format
        ; 1  u8;  2                               ; Two biquads
        ; 1  s8;  0                               ; N/A
        ; 5 f32; 0.977730 -0.977730 0        0.943314f  0
        ; 5 f32; 0.977730 -1.955252 0.977730 1.966556f -0.968597


        ; BANDPASS INT16 -------------------------------
        1  u8;  0                               ; CMSIS format
        1  u8;  1                               ; q15 format
        1  u8;  2                               ; Two biquads
        1  s8;  1                               ; postShift
        5 s16; 681   422   681 23853 -15161     ; INT16 elliptic band-pass 1450..1900/16kHz
        5 s16; 681 -1342   681 26261 -15331     ; 

        ; ; BANDPASS FLOAT32 -------------------------------
        ; 1  u8;  0                               ; CMSIS format
        ; 1  u8;  0                               ; fp32 format
        ; 1  u8;  2                               ; Two biquads
        ; 1  s8;  0                               ; N/A
        ; 5 f32; 681   422   681 23853 -15161     ; FLOAT32 elliptic band-pass 1450..1900/16kHz
        ; 5 f32; 681 -1342   681 26261 -15331     ; 
    end
;----------------------------------------------------------------------
node sigp_stream_detector 0     
    node_preset           3                 ; detector preset 
;----------------------------------------------------------------------
; arc_input   { io / set0copy1 / fmtProd } + { node / inst / arc / fmtCons }
; arc_output  { io / set0copy1 / fmtCons } + { node / inst / arc / fmtProd }
; arc         { inst / arc / fmtProd }     + { inst / arc / fmtCons }
;
arc_input   0 1 1 arm_stream_filter  0 0 1  ; io0 set0copy1 fmt1     ; INPUT => IIR, format 1 (array of samples)
arc_output  1 1 0 arm_stream_filter  0 1 0  ; io1 set0copy1 fmt0     ; DETECT => OUTPUT (one int16 for the detector output)

end