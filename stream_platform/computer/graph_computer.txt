;--------------------------------------------------------------------------
;   Stream-based processing using a graph interpreter :                    
;   
;   The main script receives a code for the implementation of a use-case :
;       - The ADC detection is used to toggle a GPIO
; 
;   +----------+     +--------+      +--------+     +--------+
;   | ADC      +-----> filter +------> detect +-----> GPIO   | 
;   +----------+     +--------+      +--------+     +--------+
;                
;----------------------------------------------------------------------
graph_location          1           ; script and linked-list stays in flash 
;----------------------------------------------------------------------
format_index            0
format_frame_length     2           ; minimum = frame of one int16
format_index            1
format_frame_length     32          ; size_data_in_1
;----------------------------------------------------------------------
stream_io               0           ;
stream_io_hwid          1           ; io_platform_data_in_1.txt
stream_io               1           ;
stream_io_hwid          9           ; io_platform_data_out_0.txt
;----------------------------------------------------------------------
node arm_stream_filter  0 
    node_preset         1                       ; Q15 filter
    node_map_hwblock    1  5                    ; TCM = VID5
    node_parameters     0                       ; TAG = "all parameters"
        1  u8;  2                               ; Two biquads
        1  u8;  1                               ; postShift
        5 s16; 0 16383 0 0 0      
        5 s16; 0 16383 0 0 0      
        ; 5 s16; 681   422   681 23853 -15161     ;  elliptic band-pass 1450..1900/16kHz
        ; 5 s16; 681 -1342   681 26261 -15331     ; 
    end
;----------------------------------------------------------------------
node sigp_stream_detector 0     
    node_preset           3                 ; detector preset 
    node_user_key         17 34             ; unlocking keys (11 22)
;----------------------------------------------------------------------
node arm_stream_script     0     
    node_preset            0

    script_register       10    ; number of word64 registers
    script_stack           6    ; size of the stack in word64      
    script_mem_shared      0    ; private memory (0) or shared(1)  
    script_mem_map         0    ; mapping to VID #0 (default)      
                                                             
    node_script_code       
        r5 =  0xFF              ; r5 =  0xFF   
;       SYSCALL NODE r-CMD r-Param r-ADDR r-N
;               FUNC   SET arcID addr   n 
        r3 | 1 10 | = r5        ; r3 |1 10| = r5
        r4 = r3 | 3 5 |         ; r4 = r3 |3 5|
;
        set r2 graph sigp_stream_detector_0 ; r2 = sigp_stream_detector_0         
        r0 = 0x412              ; r0 = TAG(4) + RESET(1) + STREAM_SET_PARAMETER(2)
        set r3 param BBB        ; set r3 param BBB 
        sp0 = 1                 ; push 1 Byte (threshold size in BBB)
;       syscall 1 (1 = node = FUNCTION_SSRV)
;         Command        C           COMMAND_SSRV   STREAM_SET_PARAMETER    2
;         Option          o           OPTION_SSRV   0
;         TAG              tt            TAG_SSRV   THR = 4
;         sub Function       f      SUBFUNCT_SSRV   0
;         Function            FF    FUNCTION_SSRV
;         Service Group         g      GROUP_SSRV   SERV_GROUP_INTERNAL     1
;           r-cmd       tag(0=none, 4=THR(doc)) + reset id + set_param
;           r-node      node address of sigp_stream_detector
;           r-addr      data address
;           r-n         nbbytes

;       R1: command (set/read parameter)
;       R2: address of the node
;       R3: address of data
;       R4: number of bytes

        syscall 1 r0 r2 r3 sp0  ; syscall NODE(1) r2(cmd=set_param) r0(set) r3(data) sp0(1 bytes)
      label AAA                
        r1 = add r1 1           ; r1 = add r1 1      Label AAA 
        r2 = xor r2 r3          ; r2 = xor r2 r3      
        test_gt r1 1            ; test_gt r1 1        
        if_no jump AAA          ; if_no jump AAA      
        syscall 15 r2 r3 r4     ; syscall 15 r2 r3 r4 
        set r0 param CCC        ; set r0 CCC          
        set r3 heap EEE         ; set r3 EEE          
        set r0 type uint8       ; set r0 type uint8   
        r2 = [ r0 ]+ 1          ; r2 = [ r0 ]+ 1      
        [ r3 ]+ 1 = r2          ; [ r3 ]+ 1 = r2      
        set r0 type uint32      ; set r0 type uint32  
        r2 = [ r0 ]+ 4          ; r2 = [ r0 ]+ 4      
        [ r3 ]+ 4 = r2          ; [ r3 ]+ 4 = r2        
        return                  ; return              
                                 
    script_parameters      0    ;TAG = "all parameters"
        1  u8 ;  34             ; ROM   h22            
        label BBB              
        2  u32; 0x33333333 0x444444444 ; ROM   h33333333 h444444444
        label CCC              
        1  u8 ;  0x55           ; ROM   h55      
        1  u32;  0x66666666     ; ROM   66666666

    script_heap
        1  u8 ;  0              ; RAM               
        label DDD              
        4  u32;  0 0 0 0        ; RAM
        label EEE              
        1  u8 ;  0              ; RAM
        1  u32;  0              ; RAM
    end
;----------------------------------------------------------------------
script  0                   ; script name           

    script_code       
        r1 = add r2 3       ; r1 = add r2 3
        r2 = -9000          ; r2 = -9000
        syscall 11          ; syscall 11
        return              ; return
    end                     ; end script 0
;----------------------------------------------------------------------
; arc_input   { io / set0copy1 / fmtProd } + { node / inst / arc / fmtCons }
; arc_output  { io / set0copy1 / fmtCons } + { node / inst / arc / fmtProd }
; arc         { inst / arc / fmtProd }     + { inst / arc / fmtCons }
;
arc_input   0 0 1 arm_stream_filter     0 0 1  ; io0 set0copy1 fmt1     ; INPUT => IIR, format 1 (array of samples)
arc_output  1 0 0 sigp_stream_detector  0 1 0  ; io1 set0copy1 fmt0     ; DETECT => OUTPUT (one int16 for the detector output)

arc arm_stream_filter 0 1 1 sigp_stream_detector 0 0 1                  ; IIR => DETECT  fmtProd = fmtCons = 64Bytes

end