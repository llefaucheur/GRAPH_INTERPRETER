;----------------------------------------------------------------------------------------
; List of nodes
;----------------------------------------------------------------------------------------
;
  1 arm_stream_script,         /* byte-code interpreter, index "arm_stream_script_INDEX" */
  2 arm_stream_router,         /* copy input arcs and subchannel and output arcs and subchannels   */     
  3 arm_stream_converter,      /* raw data format converter */
  4 arm_stream_amplifier,      /* amplifier mute and un-mute with ramp and delay control */
  5 arm_stream_mixer,          /* multichannel mixer with mute/unmute and ramp control */
  6 arm_stream_filter,         /* cascade of DF1 filters */
  7 arm_stream_detector,       /* estimates peaks/floor of the mono input and triggers a flag on high SNR */
  8 arm_stream_rescaler,       /* raw data values remapping using "interp1" */
  9 arm_stream_compressor,     /* raw data compression with adaptive prediction */
 10 arm_stream_decompressor,   /* raw data decompression */
 11 arm_stream_modulator,      /* signal generator with modulation */
 12 arm_stream_demodulator,    /* signal demodulator, frequency estimator */
 13 arm_stream_interpolator,   /* asynchronous sample-rate converter */
 14 arm_stream_qos,            /* raw data interpolator with synchronization with one HQoS stream */
 15 arm_stream_split,          /* let a buffer be used by several nodes */
 16 arm_stream_detector2D,     /* motion detect */
 17 arm_stream_filter2D,       /* arm_stream_filter2D,        */
 18 arm_stream_interpolator2D, /* arm_stream_interpolator2D,     */
 19 arm_stream_synchro,        /* arm_stream_multistream_synchro, */


;----------------------------------------------------------------------------------------
    <node_name> <instance_index>
 
    Simple format: 'S' <Preset>    for SCRIPT: <nb registers used> <stack depth>
 
    Extended     : 'X' P1 M2 S3 a4 a5 a6 a7
        <Preset> 
        <memreq "F"> 
        <pre/post process script>  
        arch, proc, priority, verbose level
 
    Examples
        arm_stream_filter 0         node subroutine name + instance ID
        S 0                         preset             simple format
        X 1 1 0  0 0 0 3            preset ...         extended format
          0 0 4                     with VID memories of memory banks
 
        arm_stram_script 0          script instance
        4 28                        nbregs stack
 
 
 
    NEXT : VIDs and specific parameters
 
        0 0 0   list of VID (defined in "platform_manifest_xxxxx.txt") to apply to 
                each node memory bank defined in swc_manifest_<node name>.txt 
                + one segment for the code 
                0 is the default VID segment for code and data
                a value +1000 means copy to fast memory before run
                a value +2000 means swap before/after
        parameters 
            1  i8; 0                0="load all parameters"
            8; i8; 1 2 3 4 5 6 7 8  parameters

            ; or  _include 1 filter_parameters.txt      (path + file-name)
        _end_    
;
;----------------------------------------------------------------------------------------
;1. arm_stream_script
;----------------------------------------------------------------------------------------
; scripts are special nodes, the byte code in indexed in the SCRIPTS section of the graph
; data RAM is placed in a shared arc for all script (instance reg+stack parameters)
; constants are placed after the byte-codes
; The default memory configuration is "shared": the TX_FIFO descriptors associated with 
;   the script are sharing the same memory buffer (BASEIDXOFFSCRARCW0). To have 
;   individual static memory associated to a script the "private memory flag" must be set.
;
node
    arm_stream_script x     x = index of the script in the SCRIPT_LW0 table (0 is reserved)
    S 4 28                  simple format : number of registers, stack depth W32
    X 4 28 1 0              nregisters, stack depth W32, private memory flag, byte format
;
    1 h16; 0211 PSHC INT8 S0=2 > R0?
    1  h8; AD10 GTR
    1 h16; 6111 JMPC #1 2 > R0 : exit
    1 h16; 0211 PSHC INT16 ARC1
    1 h16; 0011             
    1 h16; 7111 CALS READPARAM (param_id, /mySWC /toArc, arcID) 
    1 h16; B111 LABL #1
    1 h16; 9011 OPRC RETS  
    _end_               end of byte codes

    parameters   <label>
        2  i8; 1 2      ; preset=1  load only the second index (Tag=2)
        4 i16; 0 0 2 0  ; move arc0,chan0, to arc2,chan0
    _end_    
_end_


;
;----------------------------------------------------------------------------------------
;2.	arm_stream_router
;----------------------------------------------------------------------------------------
;   I/O streams have the same RAW format size, if time-stamped then only with frame size of 1
;
;   table of routing : a list of 16bits words (source 8b + destination 8b)
;   format: router arc index (3b)           up to 8 arcs
;           sub-channel index -1 (5b)       up to 32 channels
;
;   example with the router_2x2 used to merge 2 stereo input in a 4-channels output
;
node 
    arm_stream_router (i)
    S 0                     simple format
    X 0 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

    parameters <optional label for scripts>
        1  i8; 0            0=load all parameters
        2  i8; 2 2          nb input/output arcs
        4 i16; 0 0 2 0      move arc0,chan0, to arc2,chan0
        4 i16; 0 1 2 1      move arc0,chan1, to arc2,chan1
        4 i16; 1 0 2 2      move arc1,chan0, to arc2,chan2
        4 i16; 1 1 2 3      move arc1,chan1, to arc2,chan3
    _end_
_end_
;
;----------------------------------------------------------------------------------------
;3.	arm_stream_converter
;----------------------------------------------------------------------------------------
;   Operation : convert input format to the format of the output arc. 
;   For 2D data this is image rescaling, sampling-rate is not used
;   Converter is changing RAW data, interleaving, time-stamp format and number of channels
;   
;   Operations :
;   - check the output buffer size with the new format and sampling rate
;       new size = frame-input duratio x new daa rate/s
;   - process nchan, interleaving and time-stamps (as 1..8 extra channels for time64)
;       routing input buffer to a scratch buffer, merge with raw data change
;       nchan changes are done with masks on channels for the averaging 
;   - 2D resize and 1D resampling : filter + interpolator
;   TBD : creating a synchronous stream from an input using time-stamps (IMU data for ex.)
;
;   Parameters : domains of operations to correctly interpret the Word2 of the FORMAT (SETTINGS_IOFMT2)
;   
arm_stream_converter (i)
    S 0                     simple format
    X 0 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

    parameters <optional label for scripts>
        1  i8; 0            0=load all parameters
        2  i8; 2 2          nb input/output arcs
        4 i16; 0 0 2 0      move arc0,chan0, to arc2,chan0
        4 i16; 0 1 2 1      move arc0,chan1, to arc2,chan1
        4 i16; 1 0 2 2      move arc1,chan0, to arc2,chan2
        4 i16; 1 1 2 3      move arc1,chan1, to arc2,chan3
    _end_
_end_
;
;----------------------------------------------------------------------------------------
;4.	arm_stream_amplifier
;----------------------------------------------------------------------------------------
;   Operation : control of the amplitude of the input stream with controlled time of ramp-up/ramp-down. 
;   The gain control “mute” is used to store the current gain setting, being reloaded with the command “unmute”
;   Option : either the same gain/controls for all channels or list of parameters for each channel
;
;   Parameters :  new gain/mute/unmute, ramp-up/down slope, delay before starting the slope. 
;   Use-cases :
;       Features : adaptive gain control (compressor, expander, AGC) under a script control with energy polling 
;       Metadata features : "saturation occured" "energy"
;       Mixed-Signal glitches : remove the first seconds of an IR sensor until it was self-calibrated (same for audio Class-D)
;
;
;   parameters of amplifier (variable size): 
;   TAG_CMD = 1, uint8_t, 1st-order shifter slope time (as stream_mixer, 0..75k samples)
;   TAG_CMD = 2, uint16_t, desired gain FP_8m4e, 0dB=0x0805
;   TAG_CMD = 3, uint8_t, set/reset mute state
;   TAG_CMD = 4, uint16_t, delay before applying unmute, in samples
;   TAG_CMD = 5, uint16_t, delay before applying mute, in samples
;
node 
    arm_stream_amplifier (i)
    arm_stream_router
    S 0                     simple format
    X 0 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

    parameters <optional label for scripts>
        1  i8;  1           load only rising/falling coefficient slope
        1 h16;  805         gain -100dB .. +36dB (+/- 1%)
        1  i8;  0           muted state
        2 i16;  0 0         delay-up/down
    _end_  
_end_

;
;----------------------------------------------------------------------------------------
;5.	arm_stream_mixer
;----------------------------------------------------------------------------------------
;   Operation : receives several mono or multichannel streams and produces one output arc. 
;   Mixer manages up to 8 multichannels input arcs, the number is given at STREAM_RESET stage.
;
;   Parameters : input arcs names, their associated gain and time-constant in [ms], name of the 
;     output arc and an extra mixing gain
;     + index of the HQoS input arc to use for the frame size to use, if the other arcs
;       have flow-errors it will be managed with their respective OVERFLRD_ARCW2 index
;
;   preset : 
;   #1 (default) : mixer-4 with all arcs unmuted with gain = 0dB, slopes of ~1000 samples
;   #2 (shut-down) : mixer-4 with all arcs with gain = -96dB, slopes of ~100 samples
;   >2 : number of input channels
;
;   parameters of mixer (variable size): 
;   - slopes of rising and falling gains, identical to all channels
;     slope coefficient = 0..15 (iir_coef = 1-1/2^coef) = 0 .. 0.9999
;     Convergence time to 90% of the target in samples:
;      slope   nb of samples to converge
;          0           0
;          1           3
;          2           8
;          3          17
;          4          36
;          5          73
;          6         146
;          7         294
;          8         588
;          9        1178
;         10        2357
;         11        4715
;         12        9430
;         13       18862
;         14       37724
;         15       75450
;         convergence in samples = abs(round(1./abs(log10(1-1./2.^[0:15])')))
;
;   - output mixer gain format FP_8m4e followed by a list of 32bits words
;     FP_8m4em : 8b mantissa, e=4b exponent, (gain * X) = (m * X) >> (e + 2)
;       max = FF0 = 255>>(0+2) = 63.75 = 36dB
;       min = 01F = 1>>(15+2) = 7.6e-6 = -102dB
;       reset = 805 = 128>>(5+2) = 1 = 0dB
;       accuracy = 0.2% 
;
;   format to be packed in 32bits words: 
;           input arc index (4b)        up to 15 arcs
;           sub-channel index -1 (5b)   up to 32 channels per arc of the input arc
;           sub-channel index -1 (5b)   up to 32 channels per arc of the output arc
;           gain (12b)                  format FP_8m4e (0.5% accuracy in -96..+36dB) 0dB = 0x80A
;           muted (1b)                  1 = "muted"
;
node 
    arm_stream_mixer (i)
    S 0                     simple format
    X 0 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

;   Example: 4 input one mono, one stereo, output is stereo
    parameters <optional label for scripts>
        1  i8; 0                load all parameters

        2  i8; 6 6              rising/falling slope on all arcs
        1 h32; 807              -12dB output gain in FP_8m4e format; 

        4 i16; 0 0 0            arcID0 inputChan0 outputChan0 
        1 h32; 805              0dB gain; mono mixed on the left output

        4 i16; 0 0 1            arcID0 inputChan0 outputChan1 
        1 h32; 805              0dB gain; mono mixed on the right output
                   
        4 i16; 1 0 0            arcID1 inputChan0 outputChan0 
        1 h32; 805              0dB gain; stereo input left to the left

        4 i16; 1 1 1            arcID1 inputChan0 outputChan1 
        1 h32; 803             +12dB gain; stereo input right to the right
    _end_
_end_            
 

;
;----------------------------------------------------------------------------------------
;6.	arm_stream_filter
;----------------------------------------------------------------------------------------
;   Operation : receives one multichannel stream and produces one filtered multichannel stream. 
;   Parameters : biquad filters coefficients used in cascade. Implementation is 2 Biquads max.
;   (see www.w3.org/TR/audio-eq-cookbook)
;   Option : either the same coefficients for all channels or list of coefficients for each channel
;
;   presets:
;   #1 : bypass
;   #2 : LPF fc=fs/4
;   #11..42: delay-line of 1..32 samples
;
;   parameter of filter : 
;   - number of biquads in cascade (1 or 2)
;   - coefficients in Q15
;
;   Simple format : S + Preset + Use-case 
;   Extended : X + Preset, pre/post process script, arch, proc, priority, verbose level
;       followed by the list of VID virtual memory banks defined in "platform_manifest_computer.txt"
;             of each memory bank defined in swc_manifest_filter.txt
;             + one segment for the code (0=default VID segment: Flash/no Swap)
;
node
    arm_stream_filter 0         node subroutine name + instance ID
    S 1                 simple format
    X 1 0 1  0 0 0 3    preset ..
    0 0 0               list of VIDs
 ;
    parameters  optional_label
        1  i8;  0       0="load all parameters"
        1  u8;  2       Two biquads
        1  i8;  0       postShift
        5 h16; 1231 1D28 1231 63E8 D475     b0/b1/b2/-a1/-a2  ellip(4, 1, 40, 3600/8000, 'low') 
        5 h16; 1231 0B34 1231 2470 9821     second biquad
        ; or  _include    1   arm_stream_filter_parameters_x.txt      (path + file-name)
    _end_
_end_

;
;
;----------------------------------------------------------------------------------------
;7.	arm_stream_detector
;----------------------------------------------------------------------------------------
;   Operation : provides a boolean output stream from the detection of a rising 
;   edge above a tunable signal to noise ratio. 
;   A tunable delay allows to maintain the boolean value for a minimum amount of time 
;   Use-case example 1: debouncing analog input and LED / user-interface.
;   Use-case example 2: IMU and voice activity detection (VAD)
;   Parameters : time-constant to gate the output, sensitivity of the use-case
;
;   presets control
;   #1 : no HPF pre-filtering, fast and high sensitivity detection (button debouncing)
;   #2 : VAD with HPF pre-filtering, time constants tuned for ~10kHz
;   #3 : VAD with HPF pre-filtering, time constants tuned for ~44.1kHz
;   #4 : IMU detector : HPF, slow reaction time constants
;   #5 : IMU detector : HPF, fast reaction time constants
;
;   Metadata information can be extracted with the command "TAG_CMD" from parameter-read:
;   0 read the floor noise level
;   1 read the current signal peak
;   2 read the signal to noise ratio
;
;   Simple format : S + Preset 
;   Extended : X + Preset, pre/post process script, arch, proc, priority, verbose level
;       followed by the list of VID virtual memory banks defined in "platform_manifest_computer.txt"
;             of each memory bank defined in swc_manifest_filter.txt
;             + one segment for the code (0=default VID segment: Flash/no Swap)
;
node 
    arm_stream_detector 0       node name  + instance ID
    S 0                         simple format
    X 0 2 0   0 0 0 4           preset VAD 
    0 0                         list of VIDs
;
    parameters <optional label for scripts>
        2  i8; 0          0="load all parameters"
        8; i8; 1 2 3 4 5 6 7 8  the 8 bytes of "struct detector_parameters"
    _end_    
_end_
;
;
;----------------------------------------------------------------------------------------
;8.	arm_stream_rescaler
;----------------------------------------------------------------------------------------
;    Operation : applies vq = interp1(x,v,xq) using int16 data format
;    Following https://fr.mathworks.com/help/matlab/ref/interp1.html
;    Parameters : X,V vectors, size max = 32 points
;
;   presets control
;   #1 : linear interpolation
;   #2 : second-order polynomial interpolation 
;
node 
    arm_stream_rescaler (i)
    S 0                     simple format
    X 0 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

    parameters <optional label for scripts>
        1  i8;  0           load all parameters

        2; i16; -32768; 32768;
        2; i16; -20000; 20000;  this table creates the abs(x) conversion
        2; i16; -10000; 10000;
        2; i16;      0;     0;
        2; i16;  10000; 10000;
        2; i16;  20000; 20000;
        2; i16;  32767; 32767;
    _end_  
_end_
;
;----------------------------------------------------------------------------------------
;9.	    arm_stream_compressor
;----------------------------------------------------------------------------------------
;   Operation : wave compression using IMADPCM(4bits/sample)
;   Parameters : coding scheme 
;
;   presets (provision codes):
;   #1 : encoder IMADPCM
;   #2 : encoder LPC
;   #3 : encoder CVSD for BT speech 
;   #4 : encoder LC3 
;   #5 : encoder SBC
;   #6 : encoder mSBC
;   #7 : encoder OPUS Silk
;   #7 : encoder MP3
;   #8 : encoder MPEG-4 aacPlus v2 
;   #9 : encoder OPUS CELT

;
node 
    arm_stream_compressor 0
    S 1                     simple format
    X 1 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

    parameters <optional label for scripts>
        1  i8; 0            0=load all parameters
        4; i32; 0 0 0 0     provision for extra parameters in other codecs
    _end_
_end_
;
;----------------------------------------------------------------------------------------
;10.    arm_stream_decompressor
;----------------------------------------------------------------------------------------
;   Operation : wave decompression of MONO encoded data
;   Parameters : coding scheme and a block of 16 parameter bytes for codecs
;
;   presets provision
;   #1 : decoder IMADPCM
;   #2 : decoder LPC
;   #3 : decoder CVSD for BT speech 
;   #4 : decoder LC3 
;   #5 : decoder SBC
;   #6 : decoder mSBC
;   #7 : decoder OPUS Silk
;   #7 : decoder MP3
;   #8 : decoder MPEG-4 aacPlus v2 
;   #9 : decoder OPUS CELT
;
node 
    arm_stream_decompressor (i)
    S 1                     simple format
    X 1 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

    parameters <optional label for scripts>
        1  i8; 0            0=load all parameters
        1  i8; 1            state = off (generates zeros) / on with ramp-up
        4; i32; 0 0 0 0     provision for extra parameters in other codecs
    _end_
_end_
 
;
;----------------------------------------------------------------------------------------
;11.	arm_stream_modulator
;----------------------------------------------------------------------------------------
;    Operation : sine, noise, square, saw tooth with amplitude or frequency modulation
;    use-case : ring modulator, sweep generation with a cascade of a ramp generator and
;       a frequency modulator
;
;   Parameters types and Tags:
;    u8 #1 wave type : 1=sine 2=square 3=white noise 4=pink noise 
;                  5=sawtooth 6=triangle 7=pulse
;                  8=prerecorded pattern playback from arc 
;                  9=sigma-delta 10=PWM 11=ramp 12=step
;
;   parameter format for wave generation: 
;   u16 #2 linear amplitude, format UQ16 0dB .. -96dB
;   u16 #3 amplitude offset, format Q15 [-1 .. +1]
;   f32 #4 wave frequency [Hz] [0.1uHz .. 250kHz], 0Hz translates to DC level.
;   s16 #5 starting phase, format S15 [-pi .. +pi]/pi
;   u8  #6 modulation type, 0:amplitude, 1:frequency (reserved 2:FSK, ..)
;   u8  #7 modulation, 0:none 1=from arc bit stream, 2=from arc q15 words
;   u16 #8 modulation index (a) and offset (b), in q15 as fraction of frequency or amplitude
;          modulation y=ax+b, x=input data.
;   f32 #9 modulation frequency [Hz] separating two data bits/samples from the arc
;
node 
    arm_stream_modulator (i)
    S 0                     simple format
    X 0 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

    parameters <optional label for scripts>
        1  i8; 0            0=load all parameters
        1  u8;  1       sinewave
        2 h16;  FFFF 0  full-scale, no offset
        1 f32;  1200    1200Hz
        1 s16;  0       initial phase
        2  u8;  1 1     frequency modulation from bit-stream
        2 h16;  8000 0  full amplitude modulation with sign inversion of the bit-stream
        1 f32;  300     300Hz modulation => (900Hz .. 1500Hz modulation)
    _end_
_end_

;
;----------------------------------------------------------------------------------------
;12. arm_stream_demodulator
;----------------------------------------------------------------------------------------
;    Operation : decode a bit-stream from analog data. Use-case: IR decoder, CAN/UART on 
;       SPI/I2S audio, frequency estimator.
;    Parameters : clock and parity setting or let the algorithm discover the frame setting after 
;        some time. https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter
;
;   presets control :
;   #1 : frequency estimator
;    Operation : input signal frequency estimator.
;    Use second-order autoregression
;    Use-case example: measure 50Hz from power lines on the three phases (a -1% deviation means "power-down").
;    Parameters : none. output data estimate sampling rate is provided at reset
;   #2 .. 10: provision for other demodulators
;
;   Metadata information can be extracted with the command "parameter-read":
;   TAG_CMD = 1 read the signal amplitude
;   TAG_CMD = 2 read the signal to noise ratio
;
node 
    arm_stream_demodulator (i)
    S 0                     simple format
    X 0 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

    parameters <optional label for scripts>
        1  i8; 0            0=load all parameters
        2  i8; 2 2          nb input/output arcs
        4 i16; 0 0 2 0      move arc0,chan0, to arc2,chan0
        4 i16; 0 1 2 1      move arc0,chan1, to arc2,chan1
        4 i16; 1 0 2 2      move arc1,chan0, to arc2,chan2
        4 i16; 1 1 2 3      move arc1,chan1, to arc2,chan3
    _end_
_end_

;
;----------------------------------------------------------------------------------------
;13.	arm_stream_interpolator
;----------------------------------------------------------------------------------------
;   Operation : convert multichannel input data rate to the rate of the output arcs 
;     + synchronous rate convertion with +/- 100ppm adjustment
;     + conversion of time-stamp asynchronous to synchronous stream
;   
;   SSRC synchronous rate converter, FS in/out are exchanged during STREAM_RESET
;   ASRC asynchronous rate converter using time-stamps (in) to synchronous FS (out)
;       pre-LP-filtering tuned from Fout/Fin ratio + Lagrange polynomial interpolator
;
;   drift compensation managed with STREAM_SET_PARAMETER command:
;   TAG_CMD = 0 to stop drift compensation
;   TAG_CMD = 1 to continuously apply a drift compensation of +100ppm
;   TAG_CMD = 2 to continuously apply a drift compensation of -100ppm
;   The script associated to the node is used to read the in/out arcs filling state
;       to tune the drift control
;
node 
    arm_stream_interpolator (i)
    S 0                     simple format
    X 0 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

    parameters <optional label for scripts>
        1  i8; 0            0=load all parameters
        2  i8; 2 2          nb input/output arcs
        4 i16; 0 0 2 0      move arc0,chan0, to arc2,chan0
        4 i16; 0 1 2 1      move arc0,chan1, to arc2,chan1
        4 i16; 1 0 2 2      move arc1,chan0, to arc2,chan2
        4 i16; 1 1 2 3      move arc1,chan1, to arc2,chan3
    _end_
_end_

;
;----------------------------------------------------------------------------------------
;14.	arm_stream_qos
;----------------------------------------------------------------------------------------
;
;    Operation : align the content of arc buffers with respect to an high-priority one. (HQOS)
;    Parameters : the list of arcs and the one taken as time-alignment reference 
;
node 
    arm_stream_qos (i)
    S 0                     simple format
    X 0 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

    parameters <optional label for scripts>
        1  i8; 0            0=load all parameters
        2  i8; 2 2          nb input/output arcs
        4 i16; 0 0 2 0      move arc0,chan0, to arc2,chan0
        4 i16; 0 1 2 1      move arc0,chan1, to arc2,chan1
        4 i16; 1 0 2 2      move arc1,chan0, to arc2,chan2
        4 i16; 1 1 2 3      move arc1,chan1, to arc2,chan3
    _end_
_end_
;
;----------------------------------------------------------------------------------------
;15.	arm_stream_split 
;----------------------------------------------------------------------------------------
;
;    Operation : share the input arc to several output arcs, to let several nodes have
;       access to the same buffer without data duplication. Consolidate the output read
;       indexes before updating the input arc read index. 
;       There is no priority managed between output arcs.
;       The base, size and write index of the output arcs are identical to the input arc 
;   
;    Parameters : the list of arcs , no memory for instances is needed
;
node 
    arm_stream_split (i)
    S 0                     simple format
    X 0 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

    parameters <optional label for scripts>
        1  i8; 0            0=load all parameters
        2  i8; 2 2          nb input/output arcs
        4 i16; 0 0 2 0      move arc0,chan0, to arc2,chan0
        4 i16; 0 1 2 1      move arc0,chan1, to arc2,chan1
        4 i16; 1 0 2 2      move arc1,chan0, to arc2,chan2
        4 i16; 1 1 2 3      move arc1,chan1, to arc2,chan3
    _end_
_end_

;
;----------------------------------------------------------------------------------------
;16.	arm_stream_detector2D   MOTION DETECTOR
;----------------------------------------------------------------------------------------
;

;   TBD


;   Operation : detection of movement(s) and computation of the movement map
;   Parameters : sensitivity, floor-noise smoothing factors
;   Metadata : decimated map of movement detection
;
;   presets control
;   #1 : no HPF pre-filtering, fast and high sensitivity detection (button debouncing)
;
;   preset parameter : 
;
;   Metadata information can be extracted with the command "TAG_CMD" from parameter-read:
;   0 read the floor noise level
;   1 read the current signal peak
;   2 read the signal to noise ratio
;
node 
    arm_stream_detector2D (i)
    S 0                     simple format
    X 0 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

    parameters <optional label for scripts>
        1  i8; 0            0=load all parameters
        2  i8; 2 2          nb input/output arcs
        4 i16; 0 0 2 0      move arc0,chan0, to arc2,chan0
        4 i16; 0 1 2 1      move arc0,chan1, to arc2,chan1
        4 i16; 1 0 2 2      move arc1,chan0, to arc2,chan2
        4 i16; 1 1 2 3      move arc1,chan1, to arc2,chan3
    _end_
_end_
;
;
;----------------------------------------------------------------------------------------
;17.	arm_stream_filter2D
;----------------------------------------------------------------------------------------

;   TBD

;   Operation : 2D filters 
;   Parameters : convolutional kernels, decimation, distortion, color mapping
;
;   presets:
;   #1 : bypass
;
;   parameter of filter : 
;
;
node
    arm_stream_filter2D   (i)
    S 0                     simple format
    X 0 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

    parameters <optional label for scripts>
        1  i8; 0            0=load all parameters
        2  i8; 2 2          nb input/output arcs
        4 i16; 0 0 2 0      move arc0,chan0, to arc2,chan0
        4 i16; 0 1 2 1      move arc0,chan1, to arc2,chan1
        4 i16; 1 0 2 2      move arc1,chan0, to arc2,chan2
        4 i16; 1 1 2 3      move arc1,chan1, to arc2,chan3
    _end_
_end_
;

;
;----------------------------------------------------------------------------------------
;18.	arm_stream_interpolator2D
;----------------------------------------------------------------------------------------

;   TBD

;   Operation : 2D rescaling 
;   Parameters : 
;
node 
    arm_stream_interpolator2D (i)
    S 0                     simple format
    X 0 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

    parameters <optional label for scripts>
        1  i8; 0            0=load all parameters
        2  i8; 2 2          nb input/output arcs
        4 i16; 0 0 2 0      move arc0,chan0, to arc2,chan0
        4 i16; 0 1 2 1      move arc0,chan1, to arc2,chan1
        4 i16; 1 0 2 2      move arc1,chan0, to arc2,chan2
        4 i16; 1 1 2 3      move arc1,chan1, to arc2,chan3
    _end_
_end_

;----------------------------------------------------------------------------------------
;19.    arm_stream_synchro
;----------------------------------------------------------------------------------------
;
;    Operation : arranges multiple input streams are delivered at the same time.
;    Use-case: multi-channel audio stream, each channel is processed with independent
;     signal processing feature. The problem is to avoid (on MP devices) one channel to
;     be delivered to the final mixer ahead and desynchronized from the others
;   
;    Parameters : 

;    arm_stream_synchro (i)
    S 0                     simple format
    X 0 2 0   0 0 0 4       preset VAD 
    0 0                     list of VIDs

    parameters <optional label for scripts>
        1  i8; 0            0=load all parameters
        2  i8; 2 2          nb input/output arcs
        4 i16; 0 0 2 0      move arc0,chan0, to arc2,chan0
        4 i16; 0 1 2 1      move arc0,chan1, to arc2,chan1
        4 i16; 1 0 2 2      move arc1,chan0, to arc2,chan2
        4 i16; 1 1 2 3      move arc1,chan1, to arc2,chan3
    _end_
_end_

;----------------------------------------------------------------------------------------
; NOTES / QUESTIONS

if a node has undefined input frame lenght from its manifest, this must be solved at
  reset time by the producer format in case of multichannel-deinterleaved format  (??)

Document : the frame format of a producer cannot change from frame to frame

