;                                                                         
; ------+     +----------+      +----------+    +-------------+    +------
;  ADC  +---->+  FILTER  +----->+ DETECTOR +--->+SCRIPT(GPIO) +--->| GPIO 
; ------+     +----------+      +----------+    +-------------+    +------
;
;----------------------------------------------------------------------------------------
; list of desired IOs
;----------------------------------------------------------------------------------------
;
2 input/output streams;
platform_data_in;   stream name
platform_gpio_out;
;
;----------------------------------------------------------------------------------------
; List of nodes
;----------------------------------------------------------------------------------------
;
; to insert once before the list of nodes
;
; declaration :
;   name 
;   instance index
;   preset (1..255) (0 = no preset)
;   tag_cmd parameter for this preset (0..255)
;   format of the lines : 
;       nb of parameters packed in this line
;       the type of the parameters 'f' float, 'i' integer, 'c' character string
;       the data
;       optional comments 
;
;    examples : 
;       1 f32; 0.010    frame rate of the encoder     
;       3  u8; 0 0 0    node instance boot parameters 
;
;----------------------------------------------------------------------------------------
;1. arm_script
;----------------------------------------------------------------------------------------
; scripts are special nodes, 
; the declaration is followed by the codes and finishing with ENDSCRIPT
; "preset" is the number of bytes of static memory to use for static 
;   size (registers, stack size), and declared as output buffer. The descriptor of
;   which is used to lock the execution of the script.
;   ARC numbering is individual to each script
; "parameter" field is unused
;
;
node 
    arm_script
                        instanceID=index in the SCRIPT_LW0 table, number of registers, stack depth, 
    0 2 6    2 1        + ARCs :  input (stream, control) output (GPIO)
;
;   script with 2 input arcs, 1 TX arc
;   algorithm : read 1st arc 0 (mono input arc), GPIO is connected to TX arc
;       set the GPIO value to 0 or 1 depending if arc data is above a threshold
;       set new parameters to node "amplitude"
;
    SCRIPT          

    PSHL INT8  12       ; detection threshold=12
    POPR 0              ; load R0 for this comparison
    PSHL INT8   ARC0    ; first arc to read
    CALS READ_ARC       ; read arc(stack(-1), implicit subchannel 0) to stack
    OPRC GTR            ; result=stack(-1) > R0 (threshold) ?
    PSHL INT8   ARC2    ; arc 2 (TX)
    JMPC 0              ; yes: jump to 0 (set gpio=1)
    PSHL INT8   0       ; no:  set gpio=0
    JMPL 1              ; set gpio and return
    LABL 0             ;  label 0
    PSHL INT8   1       ; no:  set gpio=1
    LABL 1             ;  label 1
    CALS WRITE_ARC      ; syscall: write data(stack(-1)) to arc[stack(-2)]
;
    PSHL INT8   arm_stream_amplitude ; this is in the symbol table (node_entry_point_table[])
    PSHL INT8   0       ; instance
    PSHL PTR    amplitude_set
    CALS SETPARAM       ; syscall: setparam(amplitude, instance0, new_param=amplitude_set)
;
    PSHL INT8   arm_stream_amplitude ; this is in the symbol table (node_entry_point_table[])
    PSHL INT8   0       ; instance
    PSHL INT8   2       ; parameter TAG_CMD
    PSHL FP32   3.14    ; parameter data
    CALS SETPARAM       ; syscall: setparam(amplitude, instance0, new_param=amplitude_set)
;
    OPRC RET            ; return to scheduler
;    
    parameters amplitude_set
        2  u8; 0 1                        preset, TAG = 1  load only the gain
        1 i32; h10000   ; gain; 
    _end_    

    parameters router_set2
        2  i8; 1 2      ; preset=1  load only the second index (Tag=2)
        4 i16; 0 0 2 0  ; move arc0,chan0, to arc2,chan0
    _end_    

    _end_          ; end of byte codes
_end_

;
;----------------------------------------------------------------------------------------
;2.	arm_stream_router
;----------------------------------------------------------------------------------------
;   I/O streams have the same RAW format size, if time-stamped then only with frame size of 1
;
;   table of routing : a list of 16bits words (source 8b + destination 8b)
;   format: router arc index (3b)           up to 8 arcs
;           sub-channel index -1 (5b)       up to 32 channels
;
;   example with the router_2x2 used to merge 2 stereo input in a 4-channels output
;
node 
    arm_stream_router
    0 0 0                   instance, preset, tag

    parameters <optional label for scripts>
        2  i8; 0 255        preset=NONE    255=load all parameters
        2  i8; 2 2          nb input/output arcs
        4 i16; 0 0 2 0      move arc0,chan0, to arc2,chan0
        4 i16; 0 1 2 1      move arc0,chan1, to arc2,chan1
        4 i16; 1 0 2 2      move arc1,chan0, to arc2,chan2
        4 i16; 1 1 2 3      move arc1,chan1, to arc2,chan3
    _end_

    node_data_mapping       optional section 
        0 0 0               arch proc verbose   forced use of a processor 
        1                   memory bank allocation = instance 
        0                   virtual index (=0 default;  or one of the >0 for manual  mapping)
    _end_
_end_
;
;----------------------------------------------------------------------------------------
;3.	arm_stream_converter
;----------------------------------------------------------------------------------------
;   Operation : convert input raw data format to the format of the output arc. 
;   
arm_stream_converter
    0 0 0        instance, task = raw conversion, no tag. No parameter
;
;----------------------------------------------------------------------------------------
;4.	arm_stream_amplifier
;----------------------------------------------------------------------------------------
;   Operation : control of the amplitude of the input stream with controlled time of ramp-up/ramp-down. 
;   The gain control “mute” is used to store the current gain setting, being reloaded with the command “unmute”
;   Parameters :  new gain/mute/unmute, ramp-up/down slope, delay before starting the slope.
;       Features TBD : adaptive gain control (compressor, expander, AGC)
;       Metadata features TBD : "saturation occured"
;
;   parameters of amplifier (variable size): 
;   TAG_CMD = 1, uint8_t, 1st-order shifter slope time (as stream_mixer, 0..75k samples)
;   TAG_CMD = 2, uint16_t, desired gain FP_8m4e, 0dB=0x0805
;   TAG_CMD = 3, uint8_t, set/reset mute state
;   TAG_CMD = 4, uint16_t, delay before applying unmute, in samples
;   TAG_CMD = 5, uint16_t, delay before applying mute, in samples
;
node 
    arm_stream_amplifier; 
    0 0 0        instance, no preset, tag=unmute

    parameters <optional label for scripts>
        2  i8;  0 1         preset=NONE   load rising/falling coefficient slope
        1 h16;  805         gain -100dB .. +36dB (+/- 1%)
        1  i8;  0           muted state
        2 i16;  0 0         delay-up/down
    _end_    
_end_
;
;----------------------------------------------------------------------------------------
;5.	arm_stream_mixer
;----------------------------------------------------------------------------------------
;   Operation : receives several mono or multichannel streams and produces one output arc. 
;   Mixer manages up to 8 multichannels input arcs, the number is given at STREAM_RESET stage.
;   Parameters : input arcs names, their associated gain and time-constant in [ms], name of the 
;   output arc and an extra mixing gain
;
;   preset : 
;   #1 (default) : mixer-4 with all arcs unmuted with gain = 0dB, slopes of 1000 samples
;   #2 (shut-down) : mixer-4 with all arcs with gain = -96dB, slopes of 100 samples
;   >2 : number of input channels
;
;   parameters of mixer (variable size): 
;   - slopes of rising and falling gains, identical to all channels
;     slope coefficient = 0..15 (iir_coef = 1-1/2^coef) = 0 .. 0.9999
;     Convergence time to 90% of the target in samples:
;      slope   nb of samples to converge
;          0           0
;          1           3
;          2           8
;          3          17
;          4          36
;          5          73
;          6         146
;          7         294
;          8         588
;          9        1178
;         10        2357
;         11        4715
;         12        9430
;         13       18862
;         14       37724
;         15       75450
;         convergence in samples = abs(round(1./abs(log10(1-1./2.^[0:15])')))
;
;   - output mixer gain format FP_8m4e followed by a list of 32bits words
;     FP_8m4em : 8b mantissa, e=4b exponent, (gain * X) = (m * X) >> (e + 2)
;       max = FF0 = 255>>(0+2) = 63.75 = 36dB
;       min = 01F = 1>>(15+2) = 7.6e-6 = -102dB
;       reset = 805 = 128>>(5+2) = 1 = 0dB
;       accuracy = 0.2% 
;
;   format to be packed in 32bits words: 
;           input arc index (4b)        up to 15 arcs
;           sub-channel index -1 (5b)   up to 32 channels per arc of the input arc
;           sub-channel index -1 (5b)   up to 32 channels per arc of the output arc
;           gain (12b)                  format FP_8m4e (0.5% accuracy in -96..+36dB) 0dB = 0x80A
;           muted (1b)                  1 = "muted"
;
node 
    arm_stream_mixer            
;
;   Example: 4 input one mono, one stereo, output is stereo
    0 4 0                   instance, number of arcs, preset/tag = 0 arcs unmuted with gain = 0dB
;
    parameters <optional label for scripts>
        2  i8; 0 255            preset=NONE    load all parameters

        2  i8; 6 6              rising/falling slope on all arcs
        1 h32; 807              -12dB output gain in FP_8m4e format; 

        4 i16; 0 0 0            arcID0 inputChan0 outputChan0 
        1 h32; 805              0dB gain; mono mixed on the left output

        4 i16; 0 0 1            arcID0 inputChan0 outputChan1 
        1 h32; 805              0dB gain; mono mixed on the right output
                   
        4 i16; 1 0 0            arcID1 inputChan0 outputChan0 
        1 h32; 805              0dB gain; stereo input left to the left

        4 i16; 1 1 1            arcID1 inputChan0 outputChan1 
        1 h32; 803             +12dB gain; stereo input right to the right
    _end_   
_end_
;
;----------------------------------------------------------------------------------------
;6.	arm_stream_filter
;----------------------------------------------------------------------------------------
;   Operation : receives one multichannel stream and produces one filtered multichannel stream. 
;   Filtering is identical on each channel. GUI parameters are given in float, implementation 
;   is CMSIS-DSP through Stream services, when compiled with STREAM_SERVICE_EXTDSPML=1
;   Parameters : biquad filters coefficients used in cascade. Implementation is 2 Biquads max.
;   (see www.w3.org/TR/audio-eq-cookbook)
;
;   presets:
;   #1 : bypass
;   #2 : LPF fc=fs/4
;   #11..42: delay-line of 1..32 samples
;
;   parameter of filter : 
;   - number of biquads in cascade (1 or 2)
;   - coefficients in Q15
;
;
node
    arm_stream_filter           node subroutine name 
    0 0 0                       instance ID of the node + preset if no parameter + local script index (0=none)

    parameters
        2  i8; 0 255        preset=0    load all parameters

        1  u8;  2                           Two biquads
        1  i8;  2                           Two biquads
        1  i8;  0                           postShift
        5 h16; 1231 1D28 1231 63E8 D475     b0/b1/b2/-a1/-a2  ellip(4, 1, 40, 3600/8000, 'low') 
        5 h16; 1231 0B34 1231 2470 9821     second biquad

        ; or  _include    1   arm_stream_filter_parameters_x.txt      
    _end_

    node_data_mapping       optional section 
        0 0 0               arch proc verbose   forced use of a processor 
        2                   memory bank allocation = instance + working area in TCM
        0 0                 index=0 default, virtual index-start, 
    _end_

_end_
;
;
;----------------------------------------------------------------------------------------
;7.	arm_stream_detector
;----------------------------------------------------------------------------------------
;   Operation : provides a boolean output stream from the detection of a rising 
;   edge above a tunable signal to noise ratio. 
;   A tunable delay allows to maintain the boolean value for a minimum amount of time 
;   Use-case example 1: debouncing analog input and LED / user-interface.
;   Use-case example 2: IMU and voice activity detection (VAD)
;   Parameters : time-constant to gate the output, sensitivity of the use-case
;
;   presets control
;   #1 : no HPF pre-filtering, fast and high sensitivity detection (button debouncing)
;   #2 : VAD with HPF pre-filtering, time constants tuned for ~10kHz
;   #3 : VAD with HPF pre-filtering, time constants tuned for ~44.1kHz
;   #4 : IMU detector : HPF, slow time constants
;   #5 : IMU detector : HPF, fast time constants
;
;   preset parameter : 8bit sensitivity
;
;   Metadata information can be extracted with the command "TAG_CMD" from parameter-read:
;   0 read the floor noise level
;   1 read the current signal peak
;   2 read the signal to noise ratio
;
node 
    arm_stream_detector
    0 0 0        instance, preset, tag
;
    parameters <optional label for scripts>
        2  i8; 0 255        preset=0    load all parameters

        8; i8; 1;2;3;4;5;6;7;8; the 8 bytes of "struct detector_parameters"
    _end_    

_end_
;
;
;----------------------------------------------------------------------------------------
;8.	arm_stream_rescaler
;----------------------------------------------------------------------------------------
;    Operation : applies vq = interp1(x,v,xq) using int16 data format
;    Following https://fr.mathworks.com/help/matlab/ref/interp1.html
;    Parameters : X,V vectors, size max = 32 points
;
;   presets control
;   #1 : linear interpolation
;   #2 : second-order polynomial interpolation 
;
node 
    arm_stream_rescaler; 
    0 1 0                   instance, preset, tag
    parameters <optional label for scripts>
        2  i8; 0 255        preset=0    load all parameters

        2; i16; -32768; 32768;
        2; i16; -20000; 20000;  this table creates the abs(x) conversion
        2; i16; -10000; 10000;
        2; i16;      0;     0;
        2; i16;  10000; 10000;
        2; i16;  20000; 20000;
        2; i16;  32767; 32767;
    _end_

_end_
;
;----------------------------------------------------------------------------------------
;9.	    arm_stream_compressor
;----------------------------------------------------------------------------------------
;   Operation : wave compression using IMADPCM(4bits/sample)
;   Parameters : coding scheme 
;
;   presets:
;   #1 : standard IMADPCM encoder 
;   Provision for other coding schemes
;
node 
    arm_stream_compressor;
    0 1 0               instance, preset, tag IMADPCM 8kHz encoder IMADPCM 8kHz encoder 
;
    parameters <optional label for scripts>
        2  i8; 0 255        preset=0    load all parameters

        4; i32; 0 0 0 0     provision for extra parameters in other codecs
    _end_

_end_
;
;----------------------------------------------------------------------------------------
;10.    arm_stream_decompressor
;----------------------------------------------------------------------------------------
;   Operation : wave decompression of MONO encoded data
;   Parameters : coding scheme and a block of 16 parameter bytes for codecs
;
;   presets control
;   #1 : standard IMADPCM decoder 
;   #2 : WAV player  
;
node 
    arm_stream_decompressor
    0 1 0               instance, preset IMADPCM 8kHz decoder, no tag
;
    parameters <optional label for scripts>
        2  i8; 0 255        preset=0    load all parameters

        4; i32; 0 0 0 0     provision for extra parameters in other codecs
    _end_

_end_
;
;----------------------------------------------------------------------------------------
;11.	arm_signal_modulator
;----------------------------------------------------------------------------------------
;    Operation : sine, noise, square, saw tooth with amplitude or frequency modulation
;    use-case : ring modulator, sweep generation with a cascade of a ramp generator and
;       a frequency modulator
;
;   Parameters types and Tags:
;    u8 #1 wave type : 1=sine 2=square 3=white noise 4=pink noise 
;                  5=sawtooth 6=triangle 7=pulse
;                  8=prerecorded pattern playback from arc 
;                  9=sigma-delta from bit-stream 10=from samples (PWM output)
;
;   parameter format for wave generation: 
;   u16 #2 linear amplitude, format UQ16 0dB .. -96dB
;   u16 #3 amplitude offset, format Q15 [-1 .. +1]
;   f32 #4 wave frequency [Hz] [0.1uHz .. 250kHz];
;   s16 #5 starting phase, format S15 [-pi .. +pi]/pi
;   u8  #6 modulation type, 0:amplitude, 1:frequency (reserved 2:FSK, ..)
;   u8  #7 modulation, 0:none 1=from arc bit stream, 2=from arc q15 words
;   u16 #8 modulation index (a) and offset (b), in q15 as fraction of frequency or amplitude
;          modulation y=ax+b, x=input data.
;   f32 #9 modulation frequency [Hz] separating two data bits/samples from the arc
;
node 
    arm_signal_modulator 
    0 0 0        instance, preset, tag

    parameters <optional label for scripts>
        2  i8; 0 255        preset=0    load all parameters
        1  u8;  1       sinewave
        2 h16;  FFFF 0  full-scale, no offset
        1 f32;  1200    1200Hz
        1 s16;  0       initial phase
        2  u8;  1 1     frequency modulation from bit-stream
        2 h16;  8000 0  full amplitude modulation with sign inversion of the bit-stream
        1 f32;  300     300Hz modulation => (900Hz .. 1500Hz modulation)
    _end_

_end_
;
;----------------------------------------------------------------------------------------
;12. arm_stream_demodulator
;----------------------------------------------------------------------------------------
;    Operation : decode a bit-stream from analog data. Use-case: IR decoder, CAN/UART on 
;       SPI/I2S audio, frequency estimator.
;    Parameters : clock and parity setting or let the algorithm discover the frame setting after 
;        some time. https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter
;
;   presets control :
;   #1 : frequency estimator
;    Operation : input signal frequency estimator.
;    Use second-order autoregression
;    Use-case example: measure 50Hz from power lines on the three phases (a -1% deviation means "power-down").
;    Parameters : none. output data estimate sampling rate is provided at reset
;   #2 .. 10: provision for other demodulators
;
;   Metadata information can be extracted with the command "parameter-read":
;   TAG_CMD = 1 read the signal amplitude
;   TAG_CMD = 2 read the signal to noise ratio
;
node 
    arm_stream_demodulator 
    0 1 0        instance, preset frequency estimator, tag

_end_
;
;----------------------------------------------------------------------------------------
;13.	arm_stream_interpolator
;----------------------------------------------------------------------------------------
;   Operation : convert mono input data rate to the rate of the output arc. 
;     + synchronous rate convertion with +/- 100ppm adjustment
;     + conversion of time-stamp asynchronous to synchronous stream
;   
;   SSRC synchronous rate converter, FS in/out are exchanged during STREAM_RESET
;   ASRC asynchronous rate converter using time-stamps (in) to synchronous FS (out)
;
;   drift compensation managed with STREAM_SET_PARAMETER command:
;   TAG_CMD = 0 to stop drift compensation
;   TAG_CMD = 1 to continuously apply a drift compensation of +100ppm
;   TAG_CMD = 2 to continuously apply a drift compensation of -100ppm
;
node 
    arm_stream_interpolator
    0 0 0           instance, no preset, no tag

_end_;
;
;----------------------------------------------------------------------------------------
;14.	arm_stream_synchro
;----------------------------------------------------------------------------------------
;
;    Operation : align the content of arc buffers with respect to an high-priority one. 
;    Parameters : the list of arcs and the one taken as time-alignment reference 
;
node 
    arm_stream_synchro
    0 1 0                   instance, preset, tag

    parameters <optional label for scripts>

    _end_

_end_
;
;----------------------------------------------------------------------------------------
;15.	arm_stream_share  (TBD)
;----------------------------------------------------------------------------------------
;
;    Operation : share the input arc to several output arcs, to let several nodes have
;       access to the same buffer without data duplication. Consolidate the output read
;       index before updating the input arc read index. 
;       The base, size and write index of the output arcs are identical to the input arc 
;   
;    Parameters : the list of arcs , no memory for instances is needed
;
node 
    arm_stream_synchro
    0 0 0        instance, preset, tag
    parameters <optional label for scripts>
        2  i8; 0 255        preset=NONE    255=load all parameters
        2  i8; 4 4          nb input/output arcs
    _end_

_end_


;
;----------------------------------------------------------------------------------------
;(N+1)	arm_stream_multistream_synchro
;----------------------------------------------------------------------------------------
;
;    Operation : arranges multiple input streams are delivered at the same time.
;    Use-case: multi-channel audio stream, each channel is processed with independent
;     signal processing feature. The problem is to avoid (on MP devices) one channel to
;     delivered to the final mixer ahead and desynchroinized from the others
;   
;    Parameters : 

    arm_stream_multistream_synchro 
    0 1 0        instance, preset frequency estimator, tag



;
;
;---------------
; ARCs  arc ID; Memory bank virtual index; buffer size, unit of the size Bytes/samples/time[ms]
;
;       Node/Stream name, instance source and its output port ID
;       Node/destination, its instance and input port ID       
;
;       optional filling pattern to read from a file (file name, nb of data to read); 
;
arcs

  4   arcs
     ;ID  MEM   IO Size  samples        
      0     0   10  1   
        _graph_interface    0  1    [0]:interface from the application processor [0]:single arc 
        arm_stream_filter   0  0    
        _include    2   TestPattern.txt 

      1     0   10  1   
        arm_stream_filter   0  1    [0]:instance of the node, [1]:index of the arc (TX)
        arm_stream_detector 0  0    [0]:instance of the node, [0]:index of the arc (RX)

      2     0   10  1   
        arm_stream_detector 0  1   
        arm_script          0  0   

      3     0   10  1   
        arm_script          0  2    [0]:SCRIPT_LW0 index of the script, [2]:3rd arc (TX)
        _graph_interface    1  0    [1]:IO index of PWM,    [0]:

_end_